<?xml version="1.0" encoding="UTF-8"?>
<!-- This file was automatically generated by Eclipse PDE tools and modified slightly for our environment -->
<project name="au.org.intersect.exsite9.libs" default="build.update.jar" basedir=".">

	<property environment="env"/>
	<fail unless="env.ECLIPSE_HOME" message="ECLIPSE_HOME not set." />
	<property name="eclipse.home" value="${env.ECLIPSE_HOME}"/>

	<property name="build.dir" value="${basedir}/build"/>
	<property name="dist.dir" value="${build.dir}/dist"/>

	<property name="buildDirectory" value="${build.dir}/pde-build"/>
	<property name="p2.build.repo" value="file:${buildDirectory}/buildRepo"/>
	<property name="basews" value="${ws}"/>
	<property name="baseos" value="${os}"/>
	<property name="basearch" value="${arch}"/>
	<property name="basenl" value="${nl}"/>
	<property name="bundleId" value="au.org.intersect.exsite9.libs"/>
	<property name="bundleVersion" value="1.0.0"/>
	<property name="p2.publishonerror" value="false"/>

	<!-- Compiler settings. -->
	<property name="javacFailOnError" value="true"/>
	<property name="javacDebugInfo" value="on"/>
	<property name="javacVerbose" value="false"/>
	<property name="logExtension" value=".log"/>
	<property name="compilerArg" value=""/>
	<property name="compilation.prereq.log" value="${buildDirectory}/prereqErrors.log"/>
	<property name="javacSource" value="1.6"/>
	<property name="javacTarget" value="1.6"/>
	<condition property="dir_bootclasspath" value="${java.home}/../Classes">
		<os family="mac"/>
	</condition>
	<property name="dir_bootclasspath" value="${java.home}/lib"/>
	<path id="path_bootclasspath">
		<fileset dir="${dir_bootclasspath}">
			<include name="*.jar"/>
		</fileset>
	</path>
	<property name="bootclasspath" refid="path_bootclasspath"/>
	<condition property="bundleBootClasspath" value="${JavaSE-1.6}"	>
		<isset property="JavaSE-1.6"/>
	</condition>
	<condition property="bundleJavacSource" value="1.6"	>
		<isset property="JavaSE-1.6"/>
	</condition>
	<condition property="bundleJavacTarget" value="1.6"	>
		<isset property="JavaSE-1.6"/>
	</condition>
	<property name="bundleJavacSource" value="${javacSource}"/>
	<property name="bundleJavacTarget" value="${javacTarget}"/>
	<property name="bundleBootClasspath" value="${bootclasspath}"/>

	<target name="init" depends="properties">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins"		>
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/au.org.intersect.exsite9.libs_1.0.0"		>
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${basedir}"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>
		<property name="plugin.destination" value="${basedir}"/>
		<condition property="p2.publish.parts" value="true"		>
			<istrue value="${p2.gathering}"/>
		</condition>
		<property name="compilation.problem.marker" value="${build.result.folder}/compilation.problem"/>
		<condition property="compilation.problem.marker.exists" value="true"		>
			<and>
			<available file="${compilation.problem.marker}"/>
			<isfalse value="${p2.publishonerror}"/>
			</and>
		</condition>
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>

	</target>

	<target name="build.update.jar" depends="clean, init" description="Build the plug-in: au.org.intersect.exsite9.libs for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<mkdir dir="${dist.dir}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<jar destfile="${dist.dir}/au.org.intersect.exsite9.libs_1.0.0.jar" basedir="${temp.folder}/au.org.intersect.exsite9.libs_1.0.0" filesetmanifest="merge"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="build.jars" depends="init" description="Compile classes and build nested jars for the plug-in: au.org.intersect.exsite9.libs.">
		<delete file="${compilation.problem.marker}" quiet="true"/>
	</target>

	<target name="checkCompilationResults" if="compilation.error.occured">
		<echo file="${compilation.problem.marker}" message="au.org.intersect.exsite9.libs_1.0.0${line.separator}compilation.error.occured=${compilation.error.occured}"/>
		<eclipse.logCompileError bundle="au.org.intersect.exsite9.libs_1.0.0" log="${compilation.prereq.log}">
		</eclipse.logCompileError>
	</target>

	<target name="build.sources" depends="init">
	</target>

	<target name="publish.bin.parts" depends="init" if="p2.publish.parts" unless="compilation.problem.marker.exists">
		<mkdir dir="${build.result.folder}/au.org.intersect.exsite9.libs_1.0.0"/>
		<copy todir="${build.result.folder}" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="META-INF/MANIFEST.MF"/>
				<include name="plugin.xml"/>
				<include name="fragment.xml"/>
			</fileset>
		</copy>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${build.result.folder}"/>
			<param name="projectLocation" value="${basedir}"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
		</antcall>
		<eclipse.gatherBundle 
		   metadataRepository="${p2.build.repo}"
		   artifactRepository="${p2.build.repo}"
		   buildResultFolder="${build.result.folder}"
		   baseDirectory="${basedir}"
		/>
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/au.org.intersect.exsite9.libs_1.0.0"/>
		<copy todir="${destination.temp.folder}/au.org.intersect.exsite9.libs_1.0.0" failonerror="true" overwrite="true">
			<fileset dir="${basedir}">
				<include name="META-INF/"/>
				<include name="guava-12.0.jar"/>
				<include name="commons-lang3-3.1.jar"/>
				<include name="commons-io-2.3.jar"/>
			</fileset>
		</copy>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${destination.temp.folder}/au.org.intersect.exsite9.libs_1.0.0"/>
			<param name="projectLocation" value="${basedir}"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
		</antcall>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}/au.org.intersect.exsite9.libs_1.0.0"/>
		</antcall>
	</target>

	<target name="gather.individual.sources" depends="init">
		<antcall target="copy.src.includes">
			<param name="source.destination.folder" value="${destination.temp.folder}"/>
		</antcall>
	</target>

	<target name="copy.src.includes" depends="init">
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: au.org.intersect.exsite9.libs of all the zips, jars and logs created.">
		<delete dir="${build.dir}" />
		<delete file="${plugin.destination}/au.org.intersect.exsite9.libs_1.0.0.jar"/>
		<delete file="${plugin.destination}/au.org.intersect.exsite9.libs_1.0.0.zip"/>
		<delete dir="${temp.folder}"/>
		<delete file="${compilation.problem.marker}" quiet="true"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: au.org.intersect.exsite9.libs.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}">
				<include name="**/*.bin${logExtension}"/>
			</fileset>
		</delete>
		<zip destfile="${plugin.destination}/au.org.intersect.exsite9.libs_1.0.0.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="apitools.generation" if="generateAPIDescription">
		<apitooling.apigeneration  projectName="${projectName}" project="${projectLocation}" binary="${binary.folders}" target="${target.folder}" extramanifests="${extraManifests}" allownonapiproject="${allowNonApiProject}"		/>
	</target>

</project>
